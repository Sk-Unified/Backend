generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Providers {
  Email
  Google
  Facebook
  Twitter
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean  @default(false)
  phone         String
  phoneVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  sessions          Session[]
  accounts          Account[]
  InstagramAccounts InstagramAccounts[]
  FacebookAccounts  FacebookAccounts[]
  TwitterAccounts   TwitterAccounts[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  provider              Providers
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model InstagramAccounts {
  id          Int      @id @unique @default(autoincrement())
  user        User     @relation(fields: [usersId], references: [id])
  usersId     String   
  instagramId String   @unique
  accessToken String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FacebookAccounts {
  id              Int      @id @unique @default(autoincrement())
  user            User     @relation(fields: [usersId], references: [id])
  usersId         String   
  facebookId      String   @unique
  facebookPageId  String   @unique
  userAccessToken String   @unique
  pageAccessToken String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TwitterAccounts {
  id           Int      @id @unique @default(autoincrement())
  user         User     @relation(fields: [usersId], references: [id])
  usersId      String   
  twitterId    String   @unique
  access_token String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
